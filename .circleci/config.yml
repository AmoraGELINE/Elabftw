# circle ci config for elabftw
# https://www.elabftw.net
version: 2.1
# code coverage orb
orbs:
  codecov: codecov/codecov@3.2.2
jobs:
  build:
    working_directory: ~/elabftw/elabftw
    parallelism: 1
    shell: /bin/bash --login
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: cimg/base:current
      auth:
        username: nicolascarpi
        password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: prepare docker-compose.yml
          # Don't bind mount here, files are copied. See scrutinizer.dockerfile
          # first backslash enables different delimiter than slash
          command: |
              sed -i '\#volumes:#D' tests/docker-compose.yml
              sed -i '\#- \.\.:/elabftw#D' tests/docker-compose.yml
              sed -i '\#/elabftw/tests/_output/coverage#D' tests/docker-compose.yml
              sed -i 's#elabftw/elabimg:hypernext#elabtmp#' tests/docker-compose.yml
      - run:
          name: Build image and start elabtmp container
          command: |
              docker build -t elabtmp -f tests/scrutinizer.dockerfile --progress plain .
              docker-compose -f tests/docker-compose.yml up -d --quiet-pull
      - run:
          name: Waiting for containers to start...
          command: |
              while [ "`docker inspect -f {{.State.Health.Status}} elabtmp`" != "healthy" ];
              do
                  printf ".";
                  sleep 2;
              done;
      - run:
          name: Install JS dependencies
          command: docker exec -it elabtmp yarn install
      - run:
          name: Run SCSS linter
          command: docker exec -it elabtmp yarn csslint
      - run:
          name: Run Javascript linter
          command: docker exec -it elabtmp yarn jslint-ci
      - run:
          name: Build all
          command: docker exec -it elabtmp yarn buildall:dev
          no_output_timeout: 20m
      - run:
          name: Composer install
          command: docker exec -it elabtmp composer install --no-progress -q
      - run:
          name: Run PHP-CS-Fixer
          command: docker exec -it elabtmp yarn phpcs-dry
      - run:
          name: Prepare php.ini
          # allow tmpfile, used by phpstan
          # extend open_basedir
          # /usr/bin/psalm, //autoload.php, /root/.cache/ are for psalm
          # /usr/bin/phpstan, /proc/cpuinfo is for phpstan, https://github.com/phpstan/phpstan/issues/4427 https://github.com/phpstan/phpstan/issues/2965
          command: |
              docker exec -it elabtmp sed -i 's/tmpfile, //' /etc/php8/php.ini
              docker exec -it elabtmp sed -i 's|^open_basedir*|&:/usr/bin/psalm://autoload\.php:/root/\.cache/:/usr/bin/phpstan:/proc/cpuinfo|' /etc/php8/php.ini
      - run:
          name: Install the database
          command: docker exec -it elabtmp bin/install start -r
      - run:
          name: "PHP static analysis: pslam + phpsatn"
          command: docker exec -it elabtmp yarn static
      - run:
          name: Populate the database
          command: docker exec -it elabtmp bin/console dev:populate tests/populate-config.yml
      - run:
          name: Enable code coverage
          command: docker exec -it elabtmp bash -c "apk add --update php8-pecl-xdebug && echo 'zend_extension=xdebug.so' >> /etc/php8/php.ini && echo 'xdebug.mode=coverage' >> /etc/php8/php.ini"
      - run:
          name: Run unit tests
          command: docker exec -it elabtmp php vendor/bin/codecept run --skip acceptance --skip api --coverage --coverage-xml
      - run:
          name: Extract coverage report
          command: |
              docker cp elabtmp:/elabftw/tests/_output/coverage.xml .
              pwd
              ls -la
      - codecov/upload:
          file: coverage.xml

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - demo
                - next
