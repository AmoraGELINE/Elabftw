# circle ci config for elabftw
# https://www.elabftw.net
version: 2.1
# code coverage orb
orbs:
  codecov: codecov/codecov@3.2.2
jobs:
  build:
    working_directory: ~/elabftw/elabftw
    parallelism: 1
    shell: /bin/bash --login
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
      - image: cimg/base:current
      # ignore login credentials for now
      #  auth:
      #    username: nicolascarpi
      #    password: $DOCKERHUB_PULL_TOKEN
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.12
          # docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
          # docker_layer_caching is behind a paywall so we do it manually below
          # based on: https://anonoz.github.io/tech/2018/06/17/circleci-docker-caching.html
      # - run:
          # name: Check if there are newer images on Docker Hub
          # command: |
            # MYSQL_VERSION="$(cat tests/docker-compose.yml | grep -m 1 'image: mysql:' | awk -F : '{print $3}')"
            # echo "MySQL Version: ${MYSQL_VERSION}"
            # echo "export MYSQL_VERSION=${MYSQL_VERSION}" >> $BASH_ENV
            # TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:elabftw/elabimg:pull" \
              # | jq -r .token)
            # IMAGE_DIGEST=$(curl -s -H "Authorization: Bearer ${TOKEN}" \
              # -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              # https://index.docker.io/v2/elabftw/elabimg/manifests/hypernext \
              # | jq -r .config.digest)
            # echo ${IMAGE_DIGEST} >> elabimg-key.txt
            # echo ${IMAGE_DIGEST} >> elabcibase-key.txt
            # sha256sum tests/ci-tool-versions.env >> elabcibase-key.txt
            # TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:library/mysql:pull" \
              # | jq -r .token)
            # IMAGE_DIGEST=$(curl -s -H "Authorization: Bearer ${TOKEN}" \
              # -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              # https://index.docker.io/v2/library/mysql/manifests/${MYSQL_VERSION} \
              # | jq -r .config.digest)
            # echo ${IMAGE_DIGEST} >> mysql-key.txt
      # todo: only load elabimg from cache if elabcibase is changed because of a change in ci-tool-versions
      # - restore_cache:
          # keys:
            # - v1.1-elabimg-dep-{{ checksum "elabimg-key.txt" }}
      # - restore_cache:
          # keys:
            # - v1.1-elabcibase-dep-{{ checksum "elabcibase-key.txt" }}
      # - restore_cache:
          # keys:
            # - v1.1-mysql-dep-{{ checksum "mysql-key.txt" }}
      # - run:
          # name: Load docker images from cache
          # command: |
            # HAS_ELABCIBASE_CACHE="false"
            # echo "export HAS_ELABCIBASE_CACHE=${HAS_ELABCIBASE_CACHE}" >> $BASH_ENV
            # if [ -f ./elabcibase.tar ]; then
              # echo "Loading elabftw/elabcibase:latest ..."
              # docker image load -q -i elabcibase.tar
              # rm elabcibase.tar
              # HAS_ELABCIBASE_CACHE="true"
              # echo "export HAS_ELABCIBASE_CACHE=${HAS_ELABCIBASE_CACHE}" >> $BASH_ENV
            # fi
            # echo 'export HAS_ELABIMG_CACHE="false"' >> $BASH_ENV
            # if [ "${HAS_ELABCIBASE_CACHE}" == "false" ] && [ -f ./elabimg-hypernext.tar ]; then
              # echo "Loading elabftw/elabimg:hypernext ..."
              # docker image load -q -i elabimg-hypernext.tar
              # rm elabimg-hypernext.tar
              # echo 'export HAS_ELABIMG_CACHE="true"' >> $BASH_ENV
            # fi
            # echo 'export HAS_MYSQL_CACHE="false"' >> $BASH_ENV
            # if [ -f ./mysql.tar ]; then
              # echo "Loading mysql:${MYSQL_VERSION} ..."
              # docker image load -q -i mysql.tar
              # rm mysql.tar
              # echo 'export HAS_MYSQL_CACHE="true"' >> $BASH_ENV
            # fi
      - run:
          name: Prepare docker-compose.yml
          # Don't bind mount here, files are copied. See scrutinizer.dockerfile
          # first backslash enables different delimiter than slash
          # remove env_file section
          command: |
            sed -i '\#volumes:#D' tests/docker-compose.yml
            sed -i '\#- \.\.:/elabftw#D' tests/docker-compose.yml
            sed -i '\#/elabftw/tests/_output/coverage#D' tests/docker-compose.yml
            sed -i 's#elabftw/elabimg:hypernext#elabtmp#' tests/docker-compose.yml
            sed -i '\#env_file:#D' tests/docker-compose.yml
            sed -i '\#- elabftw-user\.env#D' tests/docker-compose.yml
      - run:
          name: Build elabtmp image
          command: |
            . ./tests/ci-tool-versions.env
            docker build -q -t elabtmp \
              -f tests/scrutinizer.dockerfile \
              --build-arg PHPSTAN_VERSION \
              --build-arg PSALM_VERSION \
              --build-arg PHAN_VERSION \
              --target elabtmp .
      - run:
          name: Start containers
          command: |
            docker compose --ansi never -f tests/docker-compose.yml up -d --quiet-pull
      # - run:
          # name: Save docker images for cache
          # command: |
            # docker images
            # if [ "${HAS_ELABCIBASE_CACHE}" == "false" ] && [ "${HAS_ELABIMG_CACHE}" == "false" ]; then
              # echo "Saving elabftw/elabimg:hypernext to elabimg-hypernext.tar"
              # docker image save -o elabimg-hypernext.tar elabftw/elabimg:hypernext
            # fi
            # if [ "${HAS_ELABCIBASE_CACHE}" == "false" ]; then
              # echo "Saving elabftw/elabcibase:latest to elabcibase.tar"
              # docker image save -o elabcibase.tar elabftw/elabcibase:latest
            # fi
            # if [ "${HAS_MYSQL_CACHE}" == "false" ]; then
              # echo "Saving mysql:${MYSQL_VERSION} to mysql.tar"
              # docker image save -o mysql.tar mysql:${MYSQL_VERSION}
            # fi
      # - save_cache:
          # key: v1.1-elabimg-dep-{{ checksum "elabimg-key.txt" }}
          # paths:
            # - ./elabimg-hypernext.tar
      # - save_cache:
          # key: v1.1-elabcibase-dep-{{ checksum "elabcibase-key.txt" }}
          # paths:
            # - ./elabcibase.tar
      # - save_cache:
          # key: v1.1-mysql-dep-{{ checksum "mysql-key.txt" }}
          # paths:
            # - ./mysql.tar
      # Restore dependency cache
      - restore_cache:
          keys:
            # This branch if available
            - v1-yarn-dep-{{ .Branch }}-{{ checksum "yarn.lock" }}
            # Default branch if not
            - v1-yarn-dep-master-
            # Any branch if there are none on the default branch
            - v1-yarn-dep-
      - run:
          name: Copy dependency cache into container
          command: |
            echo 'export HAS_CACHE="false"' >> $BASH_ENV
            if [ -d ./node_modules ]; then
              docker cp ./node_modules elabtmp:/elabftw/node_modules
            fi
            if [ -d ./yarn.cache ]; then
              docker cp ./yarn.cache elabtmp:/usr/local/share/.cache/yarn/
              echo 'export HAS_CACHE="true"' >> $BASH_ENV
            fi
      - run:
          name: Install JS dependencies
          command: docker exec -it elabtmp yarn install --silent --non-interactive --frozen-lockfile
      - run:
          name: Extract dependency cache from container
          command: |
            if [ "${HAS_CACHE}" == "false" ]; then
              docker cp elabtmp:/elabftw/node_modules/ ./node_modules
              docker cp elabtmp:/usr/local/share/.cache/yarn/ ./yarn.cache
            fi
      # Save dependency cache
      - save_cache:
          key: v1-yarn-dep-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ./yarn.cache
      - run:
          name: Run SCSS linter
          command: docker exec -it elabtmp yarn csslint
      - run:
          name: Run Javascript linter
          command: docker exec -it elabtmp yarn jslint-ci
      - run:
          name: Build all
          command: docker exec -it elabtmp yarn buildall:dev
      - run:
          name: Composer install
          command: docker exec -it elabtmp composer install --no-progress -q
      - run:
          name: Run PHP-CS-Fixer
          command: docker exec -it elabtmp yarn phpcs-dry
      - run:
          name: Prepare php.ini
          # allow tmpfile, used by phpstan
          # extend open_basedir
          # /usr/bin/psalm, //autoload.php, /root/.cache/ are for psalm
          # /usr/bin/phpstan, /proc/cpuinfo is for phpstan, https://github.com/phpstan/phpstan/issues/4427 https://github.com/phpstan/phpstan/issues/2965
          command: |
            docker exec -it elabtmp sed -i 's/tmpfile, //' /etc/php8/php.ini
            docker exec -it elabtmp sed -i 's|^open_basedir*|&:/usr/bin/psalm://autoload\.php:/root/\.cache/:/usr/bin/phpstan:/proc/cpuinfo|' /etc/php8/php.ini
      - run:
          name: "PHP static analysis: psalm + phpsatn"
          command: docker exec -it elabtmp yarn static
      - run:
          name: Install the database
          command: docker exec -it elabtmp bin/install start -r
      - run:
          name: Populate the database
          command: docker exec -it elabtmp bin/console dev:populate tests/populate-config.yml
      - run:
          name: Enable code coverage
          command: docker exec -it elabtmp bash -c "apk add --update php8-pecl-xdebug && echo 'zend_extension=xdebug.so' >> /etc/php8/php.ini && echo 'xdebug.mode=coverage' >> /etc/php8/php.ini"
      - run:
          name: Run unit tests
          command: docker exec -it elabtmp php vendor/bin/codecept run --skip acceptance --skip api --coverage --coverage-xml
      - run:
          name: Extract coverage report
          command: docker cp elabtmp:/elabftw/tests/_output/coverage.xml .
      - codecov/upload:
          file: coverage.xml

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - demo
                - next
